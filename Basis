CREATE TABLE basis_names(
            id int auto_increment primary key, 
            school TEXT,
            family_id INT,
            family_name TEXT,
            month_adjusted DATE,
            adjustment_date DATE,
            applied_to_name TEXT,
            fees_name TEXT,
            original_amount FLOAT,
            adjustment_amount FLOAT,
            new_amount FLOAT,
            adjustment_reason TEXT,
            adjusted_by_name TEXT,
            family_last_name TEXT,
            family_first_name TEXT,
            applied_to_last_name TEXT,
            applied_to_first_name TEXT,
            adjusted_by_last_name TEXT,
            adjusted_by_first_name TEXT       
);

___________________________________________EXCEL___________________________________________________________________________________________________
_____OG______
A2 - Family Id
B2 - Family Name
C2 - Month Adjustment
D2 - Date of Adjustment
E2 - Applied On (Family / Student)
F2 - Fees Name
G2 - Orignal Amount
H2 - Adjustment
I2 - New Amount
J2 - Reason for Adjustment
K2 - Adjusted By
L2 - School
____________________________
M2 - Blank
___________________
N2 - family_id
O2 - family_name
P2 - family_last_name
Q2 - family_first_name
R2 - month_adjustment
S2 - adjustment_date
T2 - applied_to_name
U2 - applied_to_last_name
V2 - applied_to_first_name
W2 - fees_name
X2 - original_amount
Y2 - adjustment_amount
Z2 - new_amount
AA2 - adjustment_reason
AB2 - adjusted_by_name
AC2 - adjusted_by_last_name
AD2 - adjusted_by_first_name
AE2 - school
AF1 - "

N2 - =TEXT(A2,"0")
O2 - =P2&", "&Q2
P2 - =PROPER(TRIM(LEFT(B2, FIND(",", B2) - 1)))
Q2 - =PROPER(TRIM(RIGHT(B2, LEN(B2) - FIND(",", B2))))
R2 - =TEXT(C2,"yyyy-mm")
S2 - =IF(LEN(D2)>10,TEXT(LEFT(D2,10),"yyyy-mm-dd"),TEXT(D2,"yyyy-mm-dd"))
T2 - =IF(PROPER(E2)="Family",U2&", "&V2&" (Family)",U2&", "&V2&"")
U2 - =IF(PROPER(E2)<>"Family", PROPER(TRIM(LEFT(E2, FIND(",", E2) - 1))),PROPER(TRIM(LEFT(B2, FIND(",", B2) - 1))))
V2 - =IF(PROPER(E2)<>"Family", PROPER(TRIM(RIGHT(E2, LEN(E2) - FIND(",", E2)))), PROPER(TRIM(RIGHT(B2, LEN(B2) - FIND(",", B2)))))
W2 - =F2
X2 - =G2
Y2 - =H2
Z2 - =I2
AA2 - =J2
AB2 - =AC2&", "&AD2
AC2 - =PROPER(TRIM(LEFT(K2, FIND(",", K2) - 1)))
AD2 - =PROPER(TRIM(RIGHT(K2, LEN(K2) - FIND(",", K2))))
AE2 - =L2
_____________________________________________________________________
AF2 - Blank

AG2 - ="("&$AF$1&AE2&$AF$1&", "&N2&", "&$AF$1&O2&$AF$1&", "&R2&", "&S2&", "&$AF$1&T2&$AF$1&", "&$AF$1&W2&$AF$1&", "&X2&", "&Y2&", "&Z2&", "&$AF$1&AA2&$AF$1&", "&$AF$1&AB2&$AF$1&", "&$AF$1&P2&$AF$1&", "&$AF$1&Q2&$AF$1&", "&$AF$1&U2&$AF$1&", "&$AF$1&V2&$AF$1&", "&$AF$1&AC2&$AF$1&", "&$AF$1&AD2&$AF$1&")"

____________________________________________________________________

            school TEXT, AE2
            family_id INT, N2
            family_name TEXT, O2
            month_adjusted DATE, R2
            adjustment_date DATE, S2
            applied_to_name TEXT, T2
            fees_name TEXT, W2
            original_amount FLOAT, X2
            adjustment_amount FLOAT, Y2
            new_amount FLOAT, Z2
            adjustment_reason TEXT, AA2
            adjusted_by_name TEXT, AB2
            family_last_name TEXT, P2
            family_first_name TEXT, Q2
            applied_to_last_name TEXT, U2
            applied_to_first_name TEXT, V2
            adjusted_by_last_name TEXT, AC2
            adjusted_by_first_name TEXT AD2 
______________________________________________________
", "&
$AF$1&
AG2 - ="("&$AF$1&AE2&$AF$1&", "&N2&", "&$AF$1&O2&$AF$1&", "&R2&", "&S2&", "&$AF$1&T2&$AF$1&", "&$AF$1&W2&$AF$1&", "&X2&", "&Y2&", "&Z2&", "&$AF$1&AA2&$AF$1&", "&$AF$1&AB2&$AF$1&", "&$AF$1&P2&$AF$1&", "&$AF$1&Q2&$AF$1&", "&$AF$1&U2&$AF$1&", "&$AF$1&V2&$AF$1&", "&$AF$1&AC2&$AF$1&", "&$AF$1&AD2&$AF$1&")"

            school TEXT, $AF$1&AE2&$AF$1&
            family_id INT, N2&
            family_name TEXT, $AF$1&O2&$AF$1&
            month_adjusted DATE, R2&", "&
            adjustment_date DATE, S2&", "&
            applied_to_name TEXT, $AF$1&T2&$AF$1&", "&
            fees_name TEXT, $AF$1&W2&$AF$1&", "&
            original_amount FLOAT, X2&", "&
            adjustment_amount FLOAT, Y2&", "&
            new_amount FLOAT, Z2&", "&
            adjustment_reason TEXT, $AF$1&AA2&$AF$1&", "&
            adjusted_by_name TEXT, $AF$1&AB2&$AF$1&", "&
            family_last_name TEXT, $AF$1&P2&$AF$1&", "&
            family_first_name TEXT, $AF$1&Q2&$AF$1&", "&
            applied_to_last_name TEXT, $AF$1&U2&$AF$1&", "&
            applied_to_first_name TEXT, $AF$1&V2&$AF$1&", "&
            adjusted_by_last_name TEXT, $AF$1&AC2&$AF$1&", "&
            adjusted_by_first_name TEXT $AF$1&AD2&$AF$1&", "&

________________________________________________________________________________________________________________________________________
in excel, what formula do I use to to get everything after the , in cell b2
=MID(B2, FIND(",", B2) + 1, LEN(B2) - FIND(",", B2))

in excel, what formula do I use to to get everything before the , in cell b2
=LEFT(B2, FIND(",", B2) - 1)



I want to create a new table to merge my current tables basis_1, basis_2, basis_3, and basis_1;
they have the same columns and I want them to continue after each other; the columns they all have are the same names and those are as follows:
family_id, family_name, family_last_name, family_first_name, month_adjusted, adjustment_date, applied_to_name, applied_to_last_name, applied_to_first_name, fees_name, original_amount, adjustment_amount, new_amount, adjustment_reason, adjusted_by_name, adjusted_by_last_name, adjusted_by_first_name, school

CREATE TABLE merged_basis (
    family_id INT,
    family_name TEXT,
    family_last_name TEXT,
    family_first_name TEXT,
    month_adjusted DATE,
    adjustment_date DATE,
    applied_to_name TEXT,
    applied_to_last_name TEXT,
    applied_to_first_name TEXT,
    fees_name TEXT,
    original_amount FLOAT,
    adjustment_amount FLOAT,
    new_amount FLOAT,
    adjustment_reason TEXT,
    adjusted_by_name TEXT,
    adjusted_by_last_name TEXT,
    adjusted_by_first_name TEXT,
    school TEXT
);

INSERT INTO merged_basis
SELECT * FROM basis_1
UNION ALL
SELECT * FROM basis_2
UNION ALL
SELECT * FROM basis_3
UNION ALL
SELECT * FROM basis_4;


------------------------------------------------------------------------------------------------------------
to find all the students and filter by the family name, student name, and the school
SELECT  count(*) AS number,
		*
FROM basis_students
GROUP BY family_full_name, student_full_name, school
ORDER BY student_full_name
54,200 results (9,742 extra)


to find all the students and filter by family name and student name
SELECT  count(*) AS number,
		*
FROM basis_students
GROUP BY family_full_name, student_full_name
ORDER BY student_full_name
44,458 results



to find all the families
SELECT  count(*) AS number,
		*
FROM basis_students
GROUP BY family_full_name
ORDER BY family_full_name
29,061 results
_______________________________________________________________________________________________________________________________________________________
This is to pull all the relevant family data that I might need to complete my schools
SELECT *
FROM(
SELECT project_family_ids.school AS project_school,
	   project_family_ids.family_id AS project_family_id,
	   project_family_ids.table_in
FROM project_family_ids) AS project_ids
JOIN school_rosters
ON school_rosters.family_id = project_ids.project_family_id)
GROUP BY school, family_id
ORDER BY family_full_name

















SELECT 	COUNT(*) AS family_name_occurrences,
		family_full_name
FROM
(SELECT 	count(*) AS num_of,
		school,
		family_id,
		family_first_name,
		family_last_name,
		family_full_name,
		student_names,
		street_address,
		city,
		state,
		zip,
		email
		
FROM(
SELECT *
FROM(
SELECT project_family_ids.school AS project_school,
	   project_family_ids.family_id AS project_family_id,
	   project_family_ids.table_in
FROM project_family_ids) AS project_ids
JOIN school_rosters
ON school_rosters.family_id = project_ids.project_family_id)
GROUP BY school, family_id
ORDER BY family_full_name)
GROUP BY family_full_name
ORDER BY family_name_occurrences DESC, family_full_name














SELECT *
FROM adjustments_all
WHERE fees_name LIKE "%OFFSET Security Deposit%"
OR fees_name LIKE "%OFFSET: Security Deposit 8-12%"
OR fees_name LIKE "%OFFSET: Security Deposit K-7%"
OR fees_name LIKE "%SD - (50%)Security Deposit K-7%"
OR fees_name LIKE "%SD - OFFSET: Security Deposit 8-12%"
OR fees_name LIKE "%SD - OFFSET: Security Deposit K-7%"
OR fees_name LIKE "%SD - Security Deposit - Financial Aid%"
OR fees_name LIKE "%SD - Security Deposit 8-12%"
OR fees_name LIKE "%SD - Security Deposit Discount - Employee%"
OR fees_name LIKE "%SD - Security Deposit Discount - Financial Aid%"
OR fees_name LIKE "%SD - Security Deposit Discount - Non-Employee%"
OR fees_name LIKE "%SD - Security Deposit Employee Credit%"
OR fees_name LIKE "%SD - Security Deposit Financial Aid%"
OR fees_name LIKE "%SD - Security Deposit K-7%"
OR fees_name LIKE "%SD- Security Deposit 8-12%"
OR fees_name LIKE "%SD- Security Deposit Employee Credit%"
OR fees_name LIKE "%SD- Security Deposit Financial Aid%"
OR fees_name LIKE "%SD- Security Deposit K-7%"
OR fees_name LIKE "%SD: 2020-21 End of Year Balance - Student Security Deposit%"
OR fees_name LIKE "%SD: 2020-21 End of Year Balance move to 2021-22 - Student Security Deposit%"
OR fees_name LIKE "%SD: 2021-22 End of year balance - Student Security Deposit%"
OR fees_name LIKE "%SD: 2021-22 End of year balance move to 2022-23 - Student Security Deposit%"
OR fees_name LIKE "%SD: 2021-22 End of year balance write off - Student Security Deposit%"
OR fees_name LIKE "%SD: Security Deposit Employee Credit%"
OR fees_name LIKE "%SD: Security Deposit Financial Aid%"
OR fees_name LIKE "%SD: Security Deposit K-7%"
OR fees_name LIKE "%SD-Employee Discount%"
OR fees_name LIKE "%SD-OFFSET: Security Deposit 8-12%"
OR fees_name LIKE "%SD-OFFSET: Security Deposit K-7%"
OR fees_name LIKE "%SD-Security Deposit 8-12%"
OR fees_name LIKE "%SD-Security Deposit 8-12.%"
OR fees_name LIKE "%SD-Security Deposit Discount - Non-Employee%"
OR fees_name LIKE "%SD-Security Deposit Employee Credit%"
OR fees_name LIKE "%SD-Security Deposit Fee Discount - Non-Employee%"
OR fees_name LIKE "%SD-Security Deposit Financial Aid%"
OR fees_name LIKE "%SD-Security Deposit K-7%"
OR fees_name LIKE "%Security Deposit 8-12%"
OR fees_name LIKE "%Security Deposit Employee Credit%"
OR fees_name LIKE "%Security Deposit Financial Aid%"
OR fees_name LIKE "%Security Deposit K-7%"





how do I create a new table in sql called adjustments_main that has the columns 
school, TEXT
school_year, TEXT
indicator_id, INT
school_id, INT
family_id, INT
family_name, TEXT
family_first_name, TEXT
family_last_name, TEXT
family_full_name, TEXT
month_adjusted, TEXT
adjustment_date, TEXT
applied_on, TEXT
student_first_name, TEXT
student_last_name, TEXT
student_full_name, TEXT
fees_name, TEXT
original_amount, FLOAT
adjustment_amount, FLOAT
new_amount, FLOAT
reason_for_adjustment, TEXT
adjusted_by, TEXT







SELECT *
FROM adjustments_all
WHERE fees_name LIKE "%ATF - Account Credit Donated%"
OR fees_name LIKE "%ATF - SD Donated to ATF%"
OR fees_name LIKE "%ATF - Security Deposit Donated%"
OR fees_name LIKE "%ATF - -Security Deposit Donated%"
OR fees_name LIKE "%ATF- Account Credit Donated to ATF%"
OR fees_name LIKE "%ATF- Credit Balance Donated%"
OR fees_name LIKE "%ATF- Security Deposit Donated%"
OR fees_name LIKE "%ATF: Security Deposit Donated%"
OR fees_name LIKE "%ATF-Account Credit Donation%"
OR fees_name LIKE "%ATF-Credit balance donated%"
OR fees_name LIKE "%ATF-Credit Donation%"
OR fees_name LIKE "%ATF-SD Donated to ATF%"
OR fees_name LIKE "%ATF-Security Deposit Donated%"
OR fees_name LIKE "%ATF-Security Deposit Donation%"
OR fees_name LIKE "%BASIS Internal Balance Discount Offset%"
OR fees_name LIKE "%BASIS Internal Balance Fee Offset%"
OR fees_name LIKE "%Credit Balance Fwd%"
OR fees_name LIKE "%Credit f/ Previous Year%"
OR fees_name LIKE "%Discount - Other Financial Aid%"
OR fees_name LIKE "%Discount- Other financial aid%"
OR fees_name LIKE "%Discount-Other financial aid%"
OR fees_name LIKE "%Employee Discount%"
OR fees_name LIKE "%Employee Discount: Other%"
OR fees_name LIKE "%Financial Aid: Other%"
OR fees_name LIKE "%Full Day Kindergarten Deposit%"
OR fees_name LIKE "%Full Day Registration NO REFUND%"
OR fees_name LIKE "%KG - Employee Discount%"
OR fees_name LIKE "%KG - Employee Discount - Kindergarten%"
OR fees_name LIKE "%KG - Employee Discount Kindergarten%"
OR fees_name LIKE "%KG - Employee Discount: Registration%"
OR fees_name LIKE "%KG - Financial Aid Discount%"
OR fees_name LIKE "%KG - Financial Aid: Kindergarten%"
OR fees_name LIKE "%KG - Financial Aid: Registration%"
OR fees_name LIKE "%KG - Full Day Kinder Non-Refundable Deposit%"
OR fees_name LIKE "%KG - Full Day Kinder Non-Refundable Registration Fee%"
OR fees_name LIKE "%KG - Full Day Kindergarten Deposit%"
OR fees_name LIKE "%KG - Full Day Registration Fee (NON-REFUNDABLE)%"
OR fees_name LIKE "%KG - Kinder Registration NO REFUND%"
OR fees_name LIKE "%KG - Kindergarten Discount - Financial Aid%"
OR fees_name LIKE "%KG - Kindergarten Discount- Employee%"
OR fees_name LIKE "%KG - Kindergarten Employee%"
OR fees_name LIKE "%KG - Kindergarten Employee Credit%"
OR fees_name LIKE "%KG - Kindergarten Employee Discount%"
OR fees_name LIKE "%KG - Kindergarten Financial Aid%"
OR fees_name LIKE "%KG - Kindergarten May Credit 2021%"
OR fees_name LIKE "%KG - Kindergarten Registration- Employee Discount%"
OR fees_name LIKE "%KG - Kindergarten Registration Financial Aid%"
OR fees_name LIKE "%KG - Kindergarten Registration Refund (West Transfer)%"
OR fees_name LIKE "%KG - Kindergarten SD Offset%"
OR fees_name LIKE "%KG - Kindergarten Tuition Financial Aid%"
OR fees_name LIKE "%KG - Offset%"
OR fees_name LIKE "%KG - Offset Kinder%"
OR fees_name LIKE "%KG ? Kindergarten Credit - Employee%"
OR fees_name LIKE "%KG- COVID19 - Kindergarten Paid In Full Tuition%"
OR fees_name LIKE "%KG- Employee Kindergarten Registration Fee Discount%"
OR fees_name LIKE "%KG- FDK Registration Refund%"
OR fees_name LIKE "%KG- Kindergarten Credit%"
OR fees_name LIKE "%KG- Kindergarten Employee Discount%"
OR fees_name LIKE "%KG- Kindergarten Registration Employee Discount%"
OR fees_name LIKE "%KG- Kindergarten Registration Fee Refund%"
OR fees_name LIKE "%KG- Kindergarten Tuition Refund%"
OR fees_name LIKE "%KG- Kindergarten: Employee Discount%"
OR fees_name LIKE "%KG- Kindergarten: Financial Aid%"
OR fees_name LIKE "%KG- Paid in Full Kinder Tuition%"
OR fees_name LIKE "%KG: OFFSET Kindergarten Registration%"
OR fees_name LIKE "%KG-Employee Kinder Discount%"
OR fees_name LIKE "%KG-Financial Aid Kindergarten Annual%"
OR fees_name LIKE "%KG-Financial Aid Kindergarten monthly%"
OR fees_name LIKE "%KG-Financial Aid Kindergarten Registration%"
OR fees_name LIKE "%KG-Financial Aid: Other%"
OR fees_name LIKE "%KG-Full Day Kinder Non-Refundable Registration Fee%"
OR fees_name LIKE "%KG-Full Day Registration Fee (NON-REFUNDABLE)%"
OR fees_name LIKE "%KG-Kindergarten Credit - Employee%"
OR fees_name LIKE "%KG-Kindergarten Employee Discount%"
OR fees_name LIKE "%KG-Kindergarten Financial Aid%"
OR fees_name LIKE "%KG-Kindergarten Registration non-refundable offset%"
OR fees_name LIKE "%KG-Paid in Full Kinder Tuition%"
OR fees_name LIKE "%OFFSET: Initial School Fees - Family%"
OR fees_name LIKE "%OFFSET: refund issued%"
OR fees_name LIKE "%OFFSET: See Note%"
OR fees_name LIKE "%Other Discount - Employee%"
OR fees_name LIKE "%Other Discount - Employee Club Enrollment Discount%"
OR fees_name LIKE "%Other Discount - Employee Club Enrollment Discount (FALL)%"
OR fees_name LIKE "%Other Discount - Employee Club Enrollment Discount (SPRING)%"
OR fees_name LIKE "%Other Discount - Financial Aid%"
OR fees_name LIKE "%Other Discount - Non-Employee%"
OR fees_name LIKE "%Other Financial Aid%"
OR fees_name LIKE "%Other Refund%"
OR fees_name LIKE "%Other: Employee Discount%"
OR fees_name LIKE "%Other: Financial Aid%"
OR fees_name LIKE "%Other: School Credit (per HOPS)%"
OR fees_name LIKE "%Other-Employee Discount%"
OR fees_name LIKE "%Other-Financial Aid%"
OR fees_name LIKE "%Paid via Shopify%"
OR fees_name LIKE "%Refund for Item already paid%"
OR fees_name LIKE "%Refund for No Show%"
OR fees_name LIKE "%Refund Misc.%"
OR fees_name LIKE "%School Credit (per HOPS)%"
OR fees_name LIKE "%SD - ATF Security Deposit Donated%"
OR fees_name LIKE "%SD - Paid Via Shopify%"
OR fees_name LIKE "%SD - Security Deposit transferred from 2016-17 Tucson Primary%"
OR fees_name LIKE "%SD - Security Deposit transferred from 2017-18 Tucson Primary%"
OR fees_name LIKE "%SD - Security Deposit transferred from 2018-19 Tucson Primary%"
OR fees_name LIKE "%SD - Security Deposit transferred from 2019-20 Tucson Primary%"
OR fees_name LIKE "%SD - Security Deposit transferred from Tucson Primary%"
OR fees_name LIKE "%SD - Security Deposit transferred to 2018-19 Tucson North%"
OR fees_name LIKE "%SD - Security Deposit transferred to 2019-20 Tucson North%"
OR fees_name LIKE "%SD - Security Deposit transferred to 2020-21 Tucson North%"
OR fees_name LIKE "%SD-ATF-Security Deposit Donated%"
OR fees_name LIKE "%SD-Security Deposit Paid via Shopify%"
OR fees_name LIKE "%Security Deposit Donated%"
OR fees_name LIKE "%Security Deposit Donated to ATF%"
OR fees_name LIKE "%Security Deposit Payment transferred from Tucson%"
OR fees_name LIKE "%Security Deposit Payment transferred to OV%"
OR fees_name LIKE "%Security Deposit Payment transferred to OVP%"
OR fees_name LIKE "%Security Deposit Payment transferred to Tucson N%"
OR fees_name LIKE "%Security Deposit Transfer%"
OR fees_name LIKE "%Security Deposit transferred to 2017-18 Tucson North%"
OR fees_name LIKE "%Security Deposit transferred to Tucson North%"







how do I create a new table in sql called adjustments_main that has the columns 
school, TEXT
school_year, TEXT
indicator_id, INT
school_id, INT
family_id, INT
family_name, TEXT
family_first_name, TEXT
family_last_name, TEXT
family_full_name, TEXT
month_adjusted, TEXT
adjustment_date, TEXT
applied_on, TEXT
student_first_name, TEXT
student_last_name, TEXT
student_full_name, TEXT
fees_name, TEXT
original_amount, FLOAT
adjustment_amount, FLOAT
new_amount, FLOAT
reason_for_adjustment, TEXT
adjusted_by, TEXT
with the values of a temporary table created by a sql query


CREATE TABLE adjustments_main (
    school TEXT,
    school_year TEXT,
    indicator_id INT,
    school_id INT,
    family_id INT,
    family_name TEXT,
    family_first_name TEXT,
    family_last_name TEXT,
    family_full_name TEXT,
    month_adjusted TEXT,
    adjustment_date TEXT,
    applied_on TEXT,
    student_first_name TEXT,
    student_last_name TEXT,
    student_full_name TEXT,
    fees_name TEXT,
    original_amount FLOAT,
    adjustment_amount FLOAT,
    new_amount FLOAT,
    reason_for_adjustment TEXT,
    adjusted_by TEXT
);

INSERT INTO adjustments_main (
    school, school_year, indicator_id, school_id, family_id,
    family_name, family_first_name, family_last_name, family_full_name,
    month_adjusted, adjustment_date, applied_on, student_first_name,
    student_last_name, student_full_name, fees_name, original_amount,
    adjustment_amount, new_amount, reason_for_adjustment, adjusted_by
)
SELECT
    school, school_year, indicator_id, school_id, family_id,
    family_name, family_first_name, family_last_name, family_full_name,
    month_adjusted, adjustment_date, applied_on, student_first_name,
    student_last_name, student_full_name, fees_name, original_amount,
    adjustment_amount, new_amount, reason_for_adjustment, adjusted_by
FROM
    temporary_table;

















CREATE TABLE all_family_ids (
  family_id INT
);
INSERT INTO all_family_ids (family_id)
SELECT family_id
FROM notes;





SELECT *
FROM 
(SELECT family_id AS id
FROM distinct_family_ids) AS dfi
JOIN school_rosters AS sr
ON sr.family_id = dfi.id




SELECT 	school,
		school_year,
		school_no,
		indicator_id,
		school_id,
		family_id,
		family_first_name,
		family_last_name,
		family_full_name,
		student_names,
		student_names_1,
		type_code,
		street_address,
		apt,
		email,
		phone_primary,
		phone_secondary,
		city,
		state,
		zip,
		fax,
		payment_plan,
		payment_method,
		payment_months,
		payment_day,
		discounts,
		fees,
		tuition,
		admin_fee_display,
		admin_fee_actual,
		follow_up_and_bank_fees,
		late_fees,
		total_discounts,
		total_fees,
		total_adv_as_discount,
		total_adv_as_payment,
		total_due,
		total_paid,
		total_paid_pending_transfer_to_school,
		total_outstanding,
		date_added,
		additional_field,
		added_by
FROM school_rosters_split
WHERE student_names_1 NOT NULL



in sql can you create for me a table called rosters_students that has the following columns

        school TEXT,
		school_year TEXT,
		school_no INT, 
		indicator_id INT,
		school_id INT,
		family_id INT,
		family_first_name TEXT,
		family_last_name TEXT,
		family_full_name TEXT,
		student_names TEXT,
		name_of_student TEXT,
		type_code TEXT,
		street_address TEXT,
		apt TEXT,
		email TEXT,
		phone_primary TEXT,
		phone_secondary TEXT,
		city TEXT,
		state TEXT,
		zip TEXT,
		fax TEXT,
		payment_plan TEXT,
		payment_method TEXT,
		payment_months TEXT,
		payment_day TEXT,
		discounts TEXT,
		fees TEXT,
		tuition TEXT,
		admin_fee_display TEXT,
		admin_fee_actual TEXT,
		follow_up_and_bank_fees TEXT,
		late_fees TEXT,
		total_discounts TEXT,
		total_fees TEXT,
		total_adv_as_discount TEXT,
		total_adv_as_payment TEXT,
		total_due TEXT,
		total_paid TEXT,
		total_paid_pending_transfer_to_school TEXT,
		total_outstanding TEXT,
		date_added TEXT,
		additional_field TEXT,
		added_by TEXT
		
		
CREATE TABLE rosters_students (
    school TEXT,
    school_year TEXT,
    school_no INT,
    indicator_id INT,
    school_id INT,
    family_id INT,
    family_first_name TEXT,
    family_last_name TEXT,
    family_full_name TEXT,
    student_names TEXT,
    name_of_student TEXT,
    type_code TEXT,
    street_address TEXT,
    apt TEXT,
    email TEXT,
    phone_primary TEXT,
    phone_secondary TEXT,
    city TEXT,
    state TEXT,
    zip TEXT,
    fax TEXT,
    payment_plan TEXT,
    payment_method TEXT,
    payment_months TEXT,
    payment_day TEXT,
    discounts TEXT,
    fees TEXT,
    tuition TEXT,
    admin_fee_display TEXT,
    admin_fee_actual TEXT,
    follow_up_and_bank_fees TEXT,
    late_fees TEXT,
    total_discounts TEXT,
    total_fees TEXT,
    total_adv_as_discount TEXT,
    total_adv_as_payment TEXT,
    total_due TEXT,
    total_paid TEXT,
    total_paid_pending_transfer_to_school TEXT,
    total_outstanding TEXT,
    date_added TEXT,
    additional_field TEXT,
    added_by TEXT
);




INSERT INTO rosters_students
SELECT * 
FROM (
SELECT 	school,
		school_year,
		school_no,
		indicator_id,
		school_id,
		family_id,
		family_first_name,
		family_last_name,
		family_full_name,
		student_names,
		student_names_1,
		type_code,
		street_address,
		apt,
		email,
		phone_primary,
		phone_secondary,
		city,
		state,
		zip,
		fax,
		payment_plan,
		payment_method,
		payment_months,
		payment_day,
		discounts,
		fees,
		tuition,
		admin_fee_display,
		admin_fee_actual,
		follow_up_and_bank_fees,
		late_fees,
		total_discounts,
		total_fees,
		total_adv_as_discount,
		total_adv_as_payment,
		total_due,
		total_paid,
		total_paid_pending_transfer_to_school,
		total_outstanding,
		date_added,
		additional_field,
		added_by
FROM school_rosters_split
WHERE student_names_1 NOT NULL)

SELECT *
FROM school_rosters



SELECT *
FROM project_organized
JOIN adjustments_all
ON adjustments_all.student_full_name = project_organized.student_name



school, 
student_name, 
sd_liability_balance, 
school_year, 
school_id, 
family_id, 
indicator_id, 
payment_amount, 
payment_method, 
payment_date, 
notes, 
account_holder_primary, 
account_holder_secondary, 
full_address, 
email_primary, 
email_secondary, 
phone_primary, 
phone_secondary, 
mobile_number, 
international_number


SELECT  School,
		indicator_id, 
		family_name, 
		family_full_name, 
		applied_on, 
		student_full_name
FROM adjustments_all
GROUP BY school,
		 indicator_id, 
		 family_name, 
		 family_full_name, 
		 applied_on, 
		 student_full_name



SELECT  School,
		school_year,
		indicator_id, 
		family_name, 
		family_full_name, 
		applied_on, 
		student_full_name
FROM adjustments_all
WHERE applied_on NOT LIKE "Family"
GROUP BY school,
		 school_year,
		 indicator_id, 
		 family_name, 
		 family_full_name, 
		 applied_on, 
		 student_full_name




SELECT school,
	   school_year,
	   indicator_id,
	   family_name_OG,
	   family_name
FROM notes
GROUP BY school,
	   school_year,
	   indicator_id,
	   family_name_OG,
	   family_name






SELECT  school,
		school_year,
		indicator_id,
		family_name_OG,
		family_full_name
FROM payments
GROUP BY school,
		school_year,
		indicator_id,
		family_name_OG,
		family_full_name
		
		
		
		
		
SELECT 	 school,
		 school_year,
		 indicator_id,
		 family_name,
		 family_full_name,
		 student_name,
		 student_full_name,
		 grade
FROM students
GROUP BY school,
		 school_year,
		 indicator_id,
		 family_name,
		 family_full_name,
		 student_name,
		 student_full_name,
		 grade

















SELECT  COUNT(*) AS num_of,
		school,
		school_year,
		fees_name,
		SUM(new_amount) total_paid,
		MIN(new_amount) min_paid,
		MAX(new_amount) max_paid,
		SUM(CASE WHEN new_amount > 0 THEN 1 ELSE 0 END) AS count_positive
FROM adjustments_all
WHERE school_year LIKE "2013-14"
AND fees_name LIKE "%OFFSET: Security Deposit%"
GROUP BY fees_name, school_year, school
ORDER BY school, fees_name
